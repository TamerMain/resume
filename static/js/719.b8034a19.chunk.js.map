{"version":3,"file":"static/js/719.b8034a19.chunk.js","mappings":"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","sources":["10_ReactRouter_Complex/components/hooks/use-http.js","10_ReactRouter_Complex/components/lib/api.js","webpack://resume/./src/10_ReactRouter_Complex/components/comments/Comments.module.css?56da","webpack://resume/./src/10_ReactRouter_Complex/components/comments/NewCommentForm.module.css?b712","10_ReactRouter_Complex/components/comments/NewCommentForm.js","webpack://resume/./src/10_ReactRouter_Complex/components/comments/CommentItem.module.css?e53c","10_ReactRouter_Complex/components/comments/CommentItem.js","webpack://resume/./src/10_ReactRouter_Complex/components/comments/CommentsList.module.css?e508","10_ReactRouter_Complex/components/comments/CommentsList.js","10_ReactRouter_Complex/components/comments/Comments.js","webpack://resume/./src/10_ReactRouter_Complex/components/quotes/HighlightedQuote.module.css?daec","10_ReactRouter_Complex/components/quotes/HighlightedQuote.js","10_ReactRouter_Complex/pages/QuoteDetail.js"],"sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://quote-917b1-default-rtdb.firebaseio.com/';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__8g1sU\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__UiN9q\",\"loading\":\"NewCommentForm_loading__rbZM7\",\"control\":\"NewCommentForm_control__NYAQQ\",\"actions\":\"NewCommentForm_actions__lwqws\"};","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../hooks/use-http';\nimport { addComment } from '../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const {sendRequest, status, error}= useHttp(addComment);\n\n  const {onAddedComment} = props;\n\n  useEffect(()=>{\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  },[status, error, onAddedComment])\n  \n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pendind' && <div className='centered'><LoadingSpinner></LoadingSpinner></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__oQKVe\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__mKJUb\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllComments } from \"../lib/api\";\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  },[sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = <div className='centered'><LoadingSpinner></LoadingSpinner></div>\n  };\n\n  if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments}/>\n  };\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>No comments were added yet.</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__lJLTr\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../components/hooks/use-http\";\r\nimport { getSingleQuote } from \"../components/lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n  const { quoteId } = params;\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  console.log(loadedQuote);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner></LoadingSpinner>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments></Comments>\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","commentTextRef","useRef","useHttp","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","text","className","classes","onSubmit","LoadingSpinner","htmlFor","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","params","useParams","loadedComments","addedCommentHandler","length","onClick","author","match","useRouteMatch","console","log","Fragment","path","exact","to","url"],"sourceRoot":""}