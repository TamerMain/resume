{"version":3,"file":"static/js/60.fcdfbcfd.chunk.js","mappings":"mIACA,MAAuB,mB,SCKvB,EAJa,SAACA,GACZ,OAAO,gBAAKC,UAAWC,EAAhB,SAA+BF,EAAMG,a,8ECD9C,SAASC,EAAYC,EAAOC,GAC1B,MAAoB,SAAhBA,EAAOC,KACF,CACLC,KAAM,KACNC,MAAO,KACPC,OAAQ,WAIQ,YAAhBJ,EAAOC,KACF,CACLC,KAAMF,EAAOK,aACbF,MAAO,KACPC,OAAQ,aAIQ,UAAhBJ,EAAOC,KACF,CACLC,KAAM,KACNC,MAAOH,EAAOM,aACdF,OAAQ,aAILL,EAgCT,IA7BA,SAAiBQ,GAA4C,IAA3BC,EAA0B,wDAC1D,GAA8BC,EAAAA,EAAAA,YAAWX,EAAa,CACpDM,OAAQI,EAAmB,UAAY,KACvCN,KAAM,KACNC,MAAO,OAHT,eAAOO,EAAP,KAAkBC,EAAlB,KAMMC,GAAcC,EAAAA,EAAAA,aAAW,mCAC7B,WAAgBC,GAAhB,8EACEH,EAAS,CAAEV,KAAM,SADnB,kBAG+BM,EAAgBO,GAH/C,OAGUT,EAHV,OAIIM,EAAS,CAAEV,KAAM,UAAWI,aAAAA,IAJhC,gDAMIM,EAAS,CACPV,KAAM,QACNK,aAAc,KAAMS,SAAW,0BARrC,yDAD6B,sDAa7B,CAACR,IAGH,OAAO,QACLK,YAAAA,GACGF,K,6LCvDDM,EAAkB,mDAEjB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,4GACkBC,MAAM,GAAD,OAAIF,EAAJ,iBADvB,cACCG,EADD,gBAEcA,EAASC,OAFvB,UAEClB,EAFD,OAIAiB,EAASE,GAJT,sBAKG,IAAIC,MAAMpB,EAAKa,SAAW,2BAL7B,OAUL,IAAWQ,KAFLC,EAAoB,GAERtB,EACVuB,GADgB,QAEpBC,GAAIH,GACDrB,EAAKqB,IAGVC,EAAkBG,KAAKF,GAhBpB,yBAmBED,GAnBF,mEAsBA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,2FACkBX,MAAM,GAAD,OAAIF,EAAJ,mBAA8Ba,EAA9B,UADvB,cACCV,EADD,gBAEcA,EAASC,OAFvB,UAEClB,EAFD,OAIAiB,EAASE,GAJT,sBAKG,IAAIC,MAAMpB,EAAKa,SAAW,0BAL7B,cAQCe,GARD,QASHJ,GAAIG,GACD3B,GAVA,kBAaE4B,GAbF,mEAgBA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAwBC,GAAxB,yFACkBd,MAAM,GAAD,OAAIF,EAAJ,gBAAmC,CAC7DiB,OAAQ,OACRC,KAAMC,KAAKC,UAAUJ,GACrBK,QAAS,CACP,eAAgB,sBALf,cACClB,EADD,gBAQcA,EAASC,OARvB,UAQClB,EARD,OAUAiB,EAASE,GAVT,sBAWG,IAAIC,MAAMpB,EAAKa,SAAW,2BAX7B,gCAcE,MAdF,kEAiBA,SAAeuB,EAAtB,+CAAO,OAAP,oBAAO,WAA0BxB,GAA1B,yFACkBI,MAAM,GAAD,OAAIF,EAAJ,qBAAgCF,EAAYe,QAA5C,SAA4D,CACtFI,OAAQ,OACRC,KAAMC,KAAKC,UAAUtB,EAAYyB,aACjCF,QAAS,CACP,eAAgB,sBALf,cACClB,EADD,gBAQcA,EAASC,OARvB,UAQClB,EARD,OAUAiB,EAASE,GAVT,sBAWG,IAAIC,MAAMpB,EAAKa,SAAW,0BAX7B,gCAcE,CAAEyB,UAAWtC,EAAKuC,OAdpB,kEAiBA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8Bb,GAA9B,+FACkBX,MAAM,GAAD,OAAIF,EAAJ,qBAAgCa,EAAhC,UADvB,cACCV,EADD,gBAGcA,EAASC,OAHvB,UAGClB,EAHD,OAKAiB,EAASE,GALT,sBAMG,IAAIC,MAAMpB,EAAKa,SAAW,2BAN7B,OAWL,IAAWQ,KAFLoB,EAAsB,GAEVzC,EACV0C,GADgB,QAEpBlB,GAAIH,GACDrB,EAAKqB,IAGVoB,EAAoBhB,KAAKiB,GAjBtB,yBAoBED,GApBF,qE,gHCzEP,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA8F,2BAA9F,EAAmI,2B,SC+DnI,EAzDkB,SAACjD,GACjB,OAAoCmD,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAiBC,EAAAA,EAAAA,UACjBC,GAAeD,EAAAA,EAAAA,UAerB,OACE,UAAC,EAAAE,SAAD,YACE,SAAC,KAAD,CACEC,KAAMN,EACN/B,QAAS,SAACsC,GAAD,MACP,yEAGJ,SAACC,EAAA,EAAD,WACE,kBACEC,QAbmB,WACzBR,GAAc,IAaRpD,UAAWC,EACX4D,SAzBR,SAA2BC,GACzBA,EAAMC,iBACN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAEzCnE,EAAMqE,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAiB5C,UAKGpE,EAAMwE,YACL,gBAAKvE,UAAWC,EAAhB,UACE,SAACuE,EAAA,EAAD,OAIJ,iBAAKxE,UAAWC,EAAhB,WACE,kBAAOwE,QAAQ,SAAf,qBACA,kBAAOnE,KAAK,OAAOyB,GAAG,SAAS2C,IAAKrB,QAEtC,iBAAKrD,UAAWC,EAAhB,WACE,kBAAOwE,QAAQ,OAAf,mBACA,qBAAU1C,GAAG,OAAO4C,KAAK,IAAID,IAAKnB,QAEpC,gBAAKvD,UAAWC,EAAhB,UACE,mBAAQ2E,QAnCY,WAC5BxB,GAAc,IAkCkCpD,UAAU,MAAlD,kC,kBC/BZ,EAjBiB,WACf,IAAM6E,GAAUC,EAAAA,EAAAA,MAChB,GAAgCC,EAAAA,EAAAA,GAAQ3C,EAAAA,IAAhCnB,EAAR,EAAQA,YAAaR,EAArB,EAAqBA,QAErBuE,EAAAA,EAAAA,YAAU,WACO,cAAXvE,GACFoE,EAAQ7C,KAAK,gBAEd,CAACvB,EAAQoE,IAMZ,OAAO,SAAC,EAAD,CAAWN,UAAsB,YAAX9D,EAAsB2D,WAJ3B,SAAC/B,GACvBpB,EAAYoB","sources":["webpack://resume/./src/10_ReactRouter_Complex/components/UI/Card.module.css?a319","10_ReactRouter_Complex/components/UI/Card.js","10_ReactRouter_Complex/components/hooks/use-http.js","10_ReactRouter_Complex/components/lib/api.js","webpack://resume/./src/10_ReactRouter_Complex/components/quotes/QuoteForm.module.css?2824","10_ReactRouter_Complex/components/quotes/QuoteForm.js","10_ReactRouter_Complex/pages/NewQuote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__gQcjS\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://quote-917b1-default-rtdb.firebaseio.com/';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__QFq-u\",\"loading\":\"QuoteForm_loading__K8IPO\",\"control\":\"QuoteForm_control__Nbfhe\",\"actions\":\"QuoteForm_actions__uMP7Z\"};","import { useRef, useState, Fragment } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you sure you want to leave? All your entered data will be lost\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useHttp from \"../components/hooks/use-http\";\r\nimport { addQuote } from \"../components/lib/api\";\r\n\r\nconst NewQuote = () => {\r\n  const history = useHistory();\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/10/quotes\");\r\n    }\r\n  }, [status, history]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n  };\r\n\r\n  return <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler}></QuoteForm>;\r\n};\r\n\r\nexport default NewQuote;\r\n"],"names":["props","className","classes","children","httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","Fragment","when","location","Card","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","ref","rows","onClick","history","useHistory","useHttp","useEffect"],"sourceRoot":""}